add_rules("mode.release")
add_rules("mode.debug")

if os.exists(".xmake/cfg.lua") then
    includes(".xmake/cfg.lua")
end
if third_party_root == nil then
    third_party_root = get_config("third_party_root")
end

local cli11_root = third_party_root .. "/CLI11"
local spdlog_root = third_party_root .. "/spdlog"
local diligent_engine_root = third_party_root .. "/DiligentEngine"
local glfw_root = third_party_root .. "/glfw"
local gtest_root = third_party_root .. "/googletest"
local grpc_root = third_party_root .. "/grpc"
local expected_root = third_party_root .. "/expected"

local function add_expected_package()
    add_includedirs(expected_root .. "/include")
    add_headerfiles(expected_root .. "/include/tl/expected.hpp")
end

local function add_cli11_package()
    add_includedirs(cli11_root .. "/include")
    add_headerfiles(cli11_root .. "/include/**/*.hpp")
    add_files(cli11_root .. "/src/Precompile.cpp")
end

local function add_spdlog_package()
    add_includedirs(spdlog_root .. "/include")
    add_defines("FMT_UNICODE=0")
end

local function add_generated_proto_package()
    add_files("build/generated/*.pb.cc")
    add_headerfiles("build/generated/*.h")
    add_includedirs("build/generated")
end

local function add_grpc_package()
    add_headerfiles(grpc_root .. "/include/**.h")
    add_includedirs(grpc_root .. "/include")
    add_includedirs(grpc_root .. "/third_party/abseil-cpp")
    add_includedirs(grpc_root .. "/third_party/protobuf/src")
    if is_plat("windows") then
        add_links("address_sorting")
        add_links("gpr")
        add_links("grpc++")
        add_links("grpc++_alts")
        add_links("grpc++_error_details")
        add_links("grpc++_reflection")
        add_links("grpc++_unsecure")
        add_links("grpc")
        add_links("grpcpp_channelz")
        add_links("grpc_authorization_provider")
        add_links("grpc_plugin_support")
        add_links("grpc_unsecure")
        add_links("upb_base_lib")
        add_links("upb_json_lib")
        add_links("upb_mem_lib")
        add_links("upb_message_lib")
        add_links("upb_mini_descriptor_lib")
        add_links("upb_textformat_lib")
        add_links("upb_wire_lib")
        add_links("utf8_range_lib")
        add_links("absl_base")
        add_links("absl_log_severity")
        add_links("absl_malloc_internal")
        add_links("absl_poison")
        add_links("absl_raw_logging_internal")
        add_links("absl_scoped_set_env")
        add_links("absl_spinlock_wait")
        add_links("absl_strerror")
        add_links("absl_throw_delegate")
        add_links("absl_hashtablez_sampler")
        add_links("absl_raw_hash_set")
        add_links("absl_crc32c")
        add_links("absl_crc_cord_state")
        add_links("absl_crc_cpu_detect")
        add_links("absl_crc_internal")
        add_links("absl_debugging_internal")
        add_links("absl_decode_rust_punycode")
        add_links("absl_demangle_internal")
        add_links("absl_demangle_rust")
        add_links("absl_examine_stack")
        add_links("absl_failure_signal_handler")
        add_links("absl_leak_check")
        add_links("absl_stacktrace")
        add_links("absl_symbolize")
        add_links("absl_utf8_for_code_point")
        add_links("absl_flags_commandlineflag")
        add_links("absl_flags_commandlineflag_internal")
        add_links("absl_flags_config")
        add_links("absl_flags_internal")
        add_links("absl_flags_marshalling")
        add_links("absl_flags_parse")
        add_links("absl_flags_private_handle_accessor")
        add_links("absl_flags_program_name")
        add_links("absl_flags_reflection")
        add_links("absl_flags_usage")
        add_links("absl_flags_usage_internal")
        add_links("absl_city")
        add_links("absl_hash")
        add_links("absl_low_level_hash")
        add_links("absl_die_if_null")
        add_links("absl_log_entry")
        add_links("absl_log_flags")
        add_links("absl_log_globals")
        add_links("absl_log_initialize")
        add_links("absl_log_internal_check_op")
        add_links("absl_log_internal_conditions")
        add_links("absl_log_internal_fnmatch")
        add_links("absl_log_internal_format")
        add_links("absl_log_internal_globals")
        add_links("absl_log_internal_log_sink_set")
        add_links("absl_log_internal_message")
        add_links("absl_log_internal_nullguard")
        add_links("absl_log_internal_proto")
        add_links("absl_log_sink")
        add_links("absl_vlog_config_internal")
        add_links("absl_int128")
        add_links("absl_exponential_biased")
        add_links("absl_periodic_sampler")
        add_links("absl_random_distributions")
        add_links("absl_random_internal_distribution_test_util")
        add_links("absl_random_internal_platform")
        add_links("absl_random_internal_pool_urbg")
        add_links("absl_random_internal_randen")
        add_links("absl_random_internal_randen_hwaes")
        add_links("absl_random_internal_randen_hwaes_impl")
        add_links("absl_random_internal_randen_slow")
        add_links("absl_random_internal_seed_material")
        add_links("absl_random_seed_gen_exception")
        add_links("absl_random_seed_sequences")
        add_links("absl_status")
        add_links("absl_statusor")
        add_links("absl_cord")
        add_links("absl_cordz_functions")
        add_links("absl_cordz_handle")
        add_links("absl_cordz_info")
        add_links("absl_cordz_sample_token")
        add_links("absl_cord_internal")
        add_links("absl_strings")
        add_links("absl_strings_internal")
        add_links("absl_string_view")
        add_links("absl_str_format_internal")
        add_links("absl_graphcycles_internal")
        add_links("absl_kernel_timeout_internal")
        add_links("absl_synchronization")
        add_links("absl_civil_time")
        add_links("absl_time")
        add_links("absl_time_zone")
        add_links("absl_bad_any_cast_impl")
        add_links("absl_bad_optional_access")
        add_links("absl_bad_variant_access")
        add_links("crypto")
        add_links("ssl")
        add_links("cares")
        add_links("libprotobuf-lite")
        add_links("libprotobuf")
        add_links("libprotoc")
        add_links("libupb")
        add_links("utf8_range")
        add_links("utf8_validity")
        add_links("re2")
        add_links("zlibstatic")
        local link_dir = grpc_root .. "/artifact/static/windows/md_crt/release/x64"
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/container")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/time")
        add_linkdirs(link_dir .. "/third_party/protobuf")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/debugging")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/base")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/numeric")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/profiling")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/hash")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/crc")
        add_linkdirs(link_dir)
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/types")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/status")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/random")
        add_linkdirs(link_dir .. "/third_party/zlib")
        add_linkdirs(link_dir .. "/third_party/re2")
        add_linkdirs(link_dir .. "/third_party/protobuf/third_party/utf8_range")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/log")
        add_linkdirs(link_dir .. "/third_party/boringssl-with-bazel")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/flags")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/synchronization")
        add_linkdirs(link_dir .. "/third_party/cares/cares/lib")
        add_linkdirs(link_dir .. "/third_party/abseil-cpp/absl/strings")
    elseif is_plat("android") then
        add_links("address_sorting")
        add_links("gpr")
        add_links("grpc++")
        add_links("grpc++_alts")
        add_links("grpc++_error_details")
        add_links("grpc++_reflection")
        add_links("grpc++_unsecure")
        add_links("grpc")
        add_links("grpcpp_channelz")
        add_links("grpc_authorization_provider")
        add_links("grpc_plugin_support")
        add_links("grpc_unsecure")
        add_links("upb_base_lib")
        add_links("upb_json_lib")
        add_links("upb_mem_lib")
        add_links("upb_message_lib")
        add_links("upb_mini_descriptor_lib")
        add_links("upb_textformat_lib")
        add_links("upb_wire_lib")
        add_links("utf8_range_lib")
        add_links("absl_base")
        add_links("absl_log_severity")
        add_links("absl_malloc_internal")
        add_links("absl_poison")
        add_links("absl_raw_logging_internal")
        add_links("absl_scoped_set_env")
        add_links("absl_spinlock_wait")
        add_links("absl_strerror")
        add_links("absl_throw_delegate")
        add_links("absl_hashtablez_sampler")
        add_links("absl_raw_hash_set")
        add_links("absl_crc32c")
        add_links("absl_crc_cord_state")
        add_links("absl_crc_cpu_detect")
        add_links("absl_crc_internal")
        add_links("absl_debugging_internal")
        add_links("absl_decode_rust_punycode")
        add_links("absl_demangle_internal")
        add_links("absl_demangle_rust")
        add_links("absl_examine_stack")
        add_links("absl_failure_signal_handler")
        add_links("absl_leak_check")
        add_links("absl_stacktrace")
        add_links("absl_symbolize")
        add_links("absl_utf8_for_code_point")
        add_links("absl_flags_commandlineflag")
        add_links("absl_flags_commandlineflag_internal")
        add_links("absl_flags_config")
        add_links("absl_flags_internal")
        add_links("absl_flags_marshalling")
        add_links("absl_flags_parse")
        add_links("absl_flags_private_handle_accessor")
        add_links("absl_flags_program_name")
        add_links("absl_flags_reflection")
        add_links("absl_flags_usage")
        add_links("absl_flags_usage_internal")
        add_links("absl_city")
        add_links("absl_hash")
        add_links("absl_low_level_hash")
        add_links("absl_die_if_null")
        add_links("absl_log_entry")
        add_links("absl_log_flags")
        add_links("absl_log_globals")
        add_links("absl_log_initialize")
        add_links("absl_log_internal_check_op")
        add_links("absl_log_internal_conditions")
        add_links("absl_log_internal_fnmatch")
        add_links("absl_log_internal_format")
        add_links("absl_log_internal_globals")
        add_links("absl_log_internal_log_sink_set")
        add_links("absl_log_internal_message")
        add_links("absl_log_internal_nullguard")
        add_links("absl_log_internal_proto")
        add_links("absl_log_sink")
        add_links("absl_vlog_config_internal")
        add_links("absl_int128")
        add_links("absl_exponential_biased")
        add_links("absl_periodic_sampler")
        add_links("absl_random_distributions")
        add_links("absl_random_internal_distribution_test_util")
        add_links("absl_random_internal_platform")
        add_links("absl_random_internal_pool_urbg")
        add_links("absl_random_internal_randen")
        add_links("absl_random_internal_randen_hwaes")
        add_links("absl_random_internal_randen_hwaes_impl")
        add_links("absl_random_internal_randen_slow")
        add_links("absl_random_internal_seed_material")
        add_links("absl_random_seed_gen_exception")
        add_links("absl_random_seed_sequences")
        add_links("absl_status")
        add_links("absl_statusor")
        add_links("absl_cord")
        add_links("absl_cordz_functions")
        add_links("absl_cordz_handle")
        add_links("absl_cordz_info")
        add_links("absl_cordz_sample_token")
        add_links("absl_cord_internal")
        add_links("absl_strings")
        add_links("absl_strings_internal")
        add_links("absl_string_view")
        add_links("absl_str_format_internal")
        add_links("absl_graphcycles_internal")
        add_links("absl_kernel_timeout_internal")
        add_links("absl_synchronization")
        add_links("absl_civil_time")
        add_links("absl_time")
        add_links("absl_time_zone")
        add_links("absl_bad_any_cast_impl")
        add_links("absl_bad_optional_access")
        add_links("absl_bad_variant_access")
        add_links("crypto")
        add_links("ssl")
        add_links("cares")
        add_links("protobuf-lite")
        add_links("protobuf")
        add_links("protoc")
        add_links("upb")
        add_links("utf8_range")
        add_links("utf8_validity")
        add_links("re2")
        add_links("z")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/random")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/profiling")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/status")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/cares/cares/lib")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/zlib")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/debugging")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/synchronization")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/strings")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf/third_party/utf8_range")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/boringssl-with-bazel")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/re2")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/zlib")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/debugging")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/synchronization")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/strings")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf/third_party/utf8_range")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/boringssl-with-bazel")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/re2")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/debugging")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/synchronization")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/strings")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf/third_party/utf8_range")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/boringssl-with-bazel")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/re2")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/strings")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf/third_party/utf8_range")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/boringssl-with-bazel")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/re2")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/boringssl-with-bazel")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/re2")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/protobuf")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/flags")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/numeric")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/hash")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/hash")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/log")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/time")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/types")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/base")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/crc")
        add_linkdirs(grpc_root .. "/artifact/android/release/arm64-v8a/third_party/abseil-cpp/absl/container")
    end
end

local function add_system_links()
    if is_plat("windows") then
        add_syslinks("User32")
        add_syslinks("Gdi32")
        add_syslinks("Shell32")
        add_syslinks("Dxgi")
        add_syslinks("Comdlg32")
        add_syslinks("d3d11")
        add_syslinks("D3DCompiler")
        add_syslinks("OpenGL32")
    end
end

local function add_diligent_core_package()
    add_links("DiligentCore")
    add_links("glew-static")
    add_links("spirv-cross-core")
    add_links("spirv-cross-glsl")
    add_links("SPIRV-Tools-diff")
    add_links("SPIRV-Tools-opt")
    add_links("SPIRV-Tools")
    local link_dir = diligent_engine_root .. "/build/static/windows/md_crt/release/x64"
    add_linkdirs(link_dir .. "/DiligentCore/Platforms/Win32")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngineD3D11")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/ShaderTools")
    add_linkdirs(link_dir .. "/DiligentCore/ThirdParty/SPIRV-Tools/source/diff")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngineNextGenBase")
    add_linkdirs(link_dir .. "/DiligentCore/ThirdParty/SPIRV-Cross")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngineVulkan")
    add_linkdirs(link_dir .. "/DiligentCore/Primitives")
    add_linkdirs(link_dir .. "/DiligentCore/ThirdParty/SPIRV-Tools/source")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngineOpenGL")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/HLSL2GLSLConverterLib")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsAccessories")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngine")
    add_linkdirs(link_dir .. "/DiligentCore/Platforms/Basic")
    add_linkdirs(link_dir .. "/DiligentCore/ThirdParty/xxHash/cmake_unofficial")
    add_linkdirs(link_dir .. "/DiligentCore/Common")
    add_linkdirs(link_dir .. "/DiligentCore/Release")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngineD3DBase")
    add_linkdirs(link_dir .. "/DiligentCore/ThirdParty/glew")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsEngineD3D12")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/Archiver")
    add_linkdirs(link_dir .. "/DiligentCore/Graphics/GraphicsTools")
    add_linkdirs(link_dir .. "/DiligentCore/ThirdParty/SPIRV-Tools/source/opt")
    add_includedirs(diligent_engine_root .. "")
    add_includedirs(diligent_engine_root .. "/DiligentCore/Platforms/Win32/interface")
    add_includedirs(diligent_engine_root .. "/DiligentCore/Graphics/GraphicsEngine/interface")
    add_includedirs(diligent_engine_root .. "/DiligentCore/Platforms/Basic/interface")
    add_includedirs(diligent_engine_root .. "/DiligentCore/Common/interface")
    add_includedirs(diligent_engine_root .. "/DiligentCore/Graphics/GraphicsTools/interface")
    add_includedirs(diligent_engine_root .. "/DiligentCore/Graphics/GraphicsAccessories/interface")
    add_headerfiles(diligent_engine_root .. "/**.hpp")
    add_headerfiles(diligent_engine_root .. "/**.h")
    add_defines("PLATFORM_WIN32=1")
    add_defines("D3D12_SUPPORTED=1")
    add_defines("D3D11_SUPPORTED=1")
    add_defines("GL_SUPPORTED=1")
    add_defines("VULKAN_SUPPORTED=1")
    add_ldflags("/LTCG")
end

local function add_diligent_engine_imgui_renderer_package()
    add_files(diligent_engine_root .. "/DiligentTools/Imgui/src/ImGuiUtils.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/Imgui/src/ImGuiDiligentRenderer.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/Imgui/src/ImGuiImplDiligent.cpp")
    if is_plat("windows") then
        add_files(diligent_engine_root .. "/DiligentTools/Imgui/src/ImGuiImplWin32.cpp")
    end
    add_includedirs(diligent_engine_root .. "/DiligentTools/Imgui/interface")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/Imgui/interface/ImGuiDiligentRenderer.hpp")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/Imgui/interface/ImGuiUtils.hpp")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/Imgui/interface/ImGuiImplWin32.hpp")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/Imgui/interface/ImGuiImplDiligent.hpp")
end

local function add_glfw_package()
    add_linkdirs(glfw_root .. "/build/static/windows/md_crt/release/x64/src")
    add_links("glfw3")
    add_includedirs(glfw_root .. "/include")
    add_headerfiles(glfw_root .. "/include/GLFW/*.h")
    add_defines("GLFW_EXPOSE_NATIVE_WIN32=1")
end

local function add_imgui_package()
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/imgui.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/backends/imgui_impl_dx12.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/backends/imgui_impl_win32.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/imgui_draw.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/imgui_tables.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/imgui_widgets.cpp")
    add_files(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/backends/imgui_impl_glfw.cpp")
    add_includedirs(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/imgui.h")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/backends/imgui_impl_dx12.h")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/backends/imgui_impl_win32.h")
    add_headerfiles(diligent_engine_root .. "/DiligentTools/ThirdParty/imgui/backends/imgui_impl_glfw.h")
end

local function add_gtest_package()
    add_includedirs(gtest_root .. "/googletest/include")
    add_headerfiles(gtest_root .. "/googletest/include/**/*.h")
    add_links("gmock")
    add_links("gmock_main")
    add_links("gtest")
    add_links("gtest_main")
    add_linkdirs(gtest_root .. "/build/static/windows/md_crt/release/x64/lib")
end

local function add_misc_package()
    add_files("misc/*.cpp")
    add_headerfiles("misc/*.h")
    add_includedirs("misc")
end

target("FileBrowserServer")
    set_kind("binary")
    set_languages("c11", "cxx17")
    add_files("server/src/*.cpp")
    add_headerfiles("server/src/*.h")
    add_grpc_package()
    add_spdlog_package()
    add_generated_proto_package()
    add_misc_package()
    if is_plat("windows") then
        set_runtimes("MD")
    end

if is_plat("windows") then
    target("FileBrowserClientTest")
        set_kind("binary")
        set_languages("c11", "cxx17")
        set_runtimes("MD")
        -- add_cxxflags("/utf-8")
        -- add_defines("SPDLOG_WCHAR_TO_UTF8_SUPPORT=1")
        add_files("client/test/main.cpp")
        add_files("client/src/*.cpp")
        add_headerfiles("client/src/*.h")
        add_includedirs("client/src")
        add_system_links()
        add_generated_proto_package()
        add_diligent_core_package()
        add_diligent_engine_imgui_renderer_package()
        add_glfw_package()
        add_imgui_package()
        add_grpc_package()
        add_spdlog_package()
        add_gtest_package()
        add_misc_package()
        add_expected_package()
        set_runargs("--gtest_filter=Other.case0")

    target("FileBrowserClient")
        set_kind("binary")
        set_languages("c11", "cxx17")
        set_runtimes("MD")
        -- add_cxxflags("/utf-8")
        -- add_defines("SPDLOG_WCHAR_TO_UTF8_SUPPORT=1")
        add_files("client/src/*.cpp")
        add_files("client/bin/main.cpp")
        add_headerfiles("client/src/*.h")
        add_includedirs("client/src")
        add_system_links()
        add_generated_proto_package()
        add_diligent_core_package()
        add_diligent_engine_imgui_renderer_package()
        add_glfw_package()
        add_imgui_package()
        add_grpc_package()
        add_spdlog_package()
        add_misc_package()
        add_expected_package()
end

target("CollectFiles")
    set_kind("binary")
    set_languages("c11", "cxx17")
    add_files("collect_files/src/*.cpp")
    add_system_links()
    add_grpc_package()
    add_spdlog_package()
    add_cli11_package()
    add_generated_proto_package()
    add_misc_package()
    if is_plat("windows") then
        set_runtimes("MD")
    end

task("fmt")
    on_run(function ()
        local files = table.join(
            os.files("server/**/*.cpp"),
            os.files("server/**/*.h"),
            os.files("client/**/*.cpp"),
            os.files("client/**/*.h"),
            os.files("misc/*.h"),
            os.files("misc/*.cpp"),
            os.files("collect_files/**/*.cpp"),
            os.files("build/generated/*.h"),
            os.files("build/generated/*.cc")
        )
        for k, v in ipairs(files) do
            print(path.absolute(v))
            os.exec(format("clang-format --style=file -i %s", path.absolute(v)))
        end
    end)
    set_menu {
    }

task("scan_lib")
    on_run(function ()
        import("core.base.option")
        local directories = {}

        local function remove_prefix(str, prefix)
            if str:sub(1, #prefix) == prefix then
                return str:sub(#prefix + 1)
            else
                return str
            end
        end
        local path_prefix = option.get("input")
        if path_prefix == nil then
            raise("No input")
        end
        if path_prefix == "" then
            raise("No input")
        end

        local files = os.files(path_prefix .. "/**/*.lib")
        local files = table.join(files)

        for k, v in ipairs(files) do
            local name = path.basename(v)
            local directory = path.directory(v)
            directories[directory] = {}
            print(format([[add_links("%s")]], remove_prefix(name, "lib")))
        end

        for directory, v in pairs(directories) do
            print(format([[add_linkdirs("%s")]], directory))
        end
    end)
    set_menu {
        options = {
            {'i', "input", "kv", nil, "" }
        }
    }

task("scan_includes")
    on_run(function ()
        import("core.base.option")
        local directories = {}

        local path_prefix = option.get("input")
        if path_prefix == nil then
            raise("No input")
        end
        if path_prefix == "" then
            raise("No input")
        end

        local files1 = os.files(path_prefix .. "/**/*.h")
        local files2 = os.files(path_prefix .. "/**/*.hpp")
        local files = table.join(files1, files2)

        for k, v in ipairs(files) do
            local directory = path.directory(v)
            directories[directory] = {}
        end

        for directory, v in pairs(directories) do
            print(format([[add_includedirs("%s")]], directory))
        end
    end)
    set_menu {
        options = {
            {'i', "input", "kv", nil, "" }
        }
    }

task("proto")
    on_run(function ()
        import("core.project.config")
        config.load()
        third_party_root = get_config("third_party_root")
        grpc_root = third_party_root .. "/grpc"
        local command = [[protoc -I ./protos --grpc_out=./build/generated --cpp_out=./build/generated --plugin=protoc-gen-grpc="%s" FileBrowser.proto]]
        local grpc_cpp_plugin_exe = grpc_root .. "/artifact/windows/md_crt/release/x64/grpc_cpp_plugin.exe"
        if os.exists(grpc_cpp_plugin_exe) then
            command = format(command, grpc_cpp_plugin_exe)
            os.mkdir("./build")
            os.mkdir("./build/generated")
            os.exec(command)
        end
    end)
    set_menu {
    }

task("push")
    on_run(function ()
        os.exec("adb push ./build/android/arm64-v8a/release/CollectFiles /data/local/tmp/CollectFiles")
        os.exec("adb shell chmod +x /data/local/tmp/CollectFiles")
        os.exec("adb shell /data/local/tmp/CollectFiles -i /storage/sdcard0 -o /data/local/tmp/android_files.bin")
    end)
    set_menu {
    }

task("pull")
    on_run(function ()
        os.cd("$(buildir)")
        os.exec("adb pull /data/local/tmp/android_files.bin")
    end)
    set_menu {
    }

task("disk_usage")
    on_run(function ()
        os.exec([[adb shell "find . -type f -exec du {} + | sort -n -r | head -n 15"]])
    end)
    set_menu {
    }